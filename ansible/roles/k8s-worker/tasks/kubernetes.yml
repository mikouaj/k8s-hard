- name: Check existence of k8s binaries
  ansible.builtin.stat:
    path: /usr/local/bin/{{ item }}
  register: k8sbin_stat
  with_items:
    - kubectl
    - kube-proxy
    - kubelet

- name: Install k8s binaries
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/{{ item.item }}"
    dest: /usr/local/bin
    mode: '0755'
  become: yes
  when: not item.stat.exists
  loop: "{{ k8sbin_stat.results }}"

- name: Create installation directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  become: yes
  with_items:
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes

- name: Copy k8s configuration files
  block:
    - name: Copy CA certificate
      ansible.builtin.copy:
        src: "{{ cert_dir }}/ca.pem"
        dest: "/var/lib/kubernetes"
    - name: Copy Kubelet certificate
      ansible.builtin.copy:
        src: "{{ cert_dir }}/{{ inventory_hostname }}.pem"
        dest: "/var/lib/kubelet"
    - name: Copy Kubelet key
      ansible.builtin.copy:
        src: "{{ cert_dir }}/{{ inventory_hostname }}-key.pem"
        dest: "/var/lib/kubelet"
    - name: Copy Kubelet kube-config
      ansible.builtin.copy:
        src: "{{ cert_dir }}/{{ inventory_hostname }}.kubeconfig"
        dest: "/var/lib/kubelet/kubeconfig"
    - name: Copy kube-proxy configuration file
      ansible.builtin.copy:
        src: "{{ cert_dir }}/kube-proxy.kubeconfig" 
        dest: "/var/lib/kube-proxy/kubeconfig"
  become: yes

- name: Create kubelet configuration
  block:
    - name: Copy kubelet configuration file template
      ansible.builtin.copy:
        src: "{{ role_path }}/files/kubelet-config.yml"
        dest: "/var/lib/kubelet"
    - name: Replace in kubelet configuration file template - POD CIDR
      ansible.builtin.lineinfile:
        path: "/var/lib/kubelet/kubelet-config.yml"
        regexp: '^(.*)podCIDR:'
        line: '\1podCIDR: "{{ pod_cidr }}"'
        backrefs: yes
    - name: Replace in kubelet configuration file template - TLS CERT FILE
      ansible.builtin.lineinfile:
        path: "/var/lib/kubelet/kubelet-config.yml"
        regexp: '^(.*)tlsCertFile:'
        line: '\1tlsCertFile: "/var/lib/kubelet/{{ inventory_hostname }}.pem"'
        backrefs: yes
    - name: Replace in kubelet configuration file template - TLS PRIVATE KEY FILE
      ansible.builtin.lineinfile:
        path: "/var/lib/kubelet/kubelet-config.yml"
        regexp: '^(.*)tlsPrivateKeyFile:'
        line: '\1tlsPrivateKeyFile: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem"'
        backrefs: yes
  become: yes

- name: Create kubelet service
  ansible.builtin.copy:
    src: "{{ role_path }}/files/kubelet.service"
    dest: "/etc/systemd/system"
  become: yes

- name: Run kubelet service
  ansible.builtin.systemd:
    name: kubelet
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes

- name: Create kube-proxy configuration
  ansible.builtin.copy:
    src: "{{ role_path }}/files/kube-proxy-config.yml"
    dest: "/var/lib/kube-proxy"
  become: yes

- name: Create kube-proxy service
  ansible.builtin.copy:
    src: "{{ role_path }}/files/kube-proxy.service"
    dest: "/etc/systemd/system"
  become: yes

- name: Run kube-proxy service
  ansible.builtin.systemd:
    name: kube-proxy
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes
